services:
  # FastAPI Gateway Service - Runtime stage
  fastapi-gateway:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: runtime
    container_name: fastapi-gateway
    ports:
      - "8080:8000"
    environment:
      - LOCALAI_HOST=localai
      - LOCALAI_PORT=8080
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      localai:
        condition: service_healthy
      qdrant:
        condition: service_started
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8000/health/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - llm-network

  # Lint Service - Development stage for code quality checks
  lint:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: dev
    container_name: lint
    command: >
      sh -c "
        echo 'Running code quality checks...' &&
        echo '1. Black formatting check...' &&
        black --check --diff . &&
        echo '2. Ruff linting...' &&
        ruff check . &&
        echo '3. Import sorting check...' &&
        isort --check-only --diff . &&
        echo '4. Type checking...' &&
        mypy app/ &&
        echo '5. Running tests...' &&
        pytest test_*.py -v &&
        echo 'All checks passed!'
      "
    volumes:
      - ./backend:/app
    depends_on:
      - fastapi-gateway
    networks:
      - llm-network
    profiles:
      - dev

  # LocalAI Service
  localai:
    image: localai/localai:latest-aio-cpu
    container_name: localai
    ports:
      - "8081:8080"
    environment:
      - CONFIG_FILE=/etc/localai/config.yaml
    volumes:
      - localai-data:/models
      - ./backend/localai-config.yaml:/etc/localai/config.yaml
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/readyz"]
      interval: 60s
      timeout: 20s
      retries: 3
      start_period: 120s
    networks:
      - llm-network

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    restart: always
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant-data:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/readyz"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - llm-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=con_selfrag
      - POSTGRES_USER=con_selfrag
      - POSTGRES_PASSWORD=con_selfrag_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/postgres-init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U con_selfrag -d con_selfrag"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - llm-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - llm-network

volumes:
  localai-data:
    driver: local
  qdrant-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local

networks:
  llm-network:
    driver: bridge