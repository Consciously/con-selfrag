[project]
name = "localai-llm-template"
version = "1.0.0"
description = "Clean template for frontend-backend-AI architecture with LocalAI"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
requires-python = ">=3.11"

# Minimal essential dependencies following YAGNI principles
dependencies = [
    "fastapi>=0.104.0",
    "openai>=1.0.0",  # OpenAI client for LocalAI compatibility
    "loguru>=0.7.0",
    "pydantic>=2.0.0",
    "uvicorn>=0.24.0",
    "requests>=2.31.0",  # HTTP requests for tests and utilities
    "httpx>=0.25.0",  # Async HTTP client
]

# Database dependencies (commented out for now - uncomment when needed)
# "asyncpg>=0.29.0",        # PostgreSQL async driver
# "sqlalchemy>=2.0.0",     # ORM for PostgreSQL
# "qdrant-client>=1.7.0",  # Qdrant vector database client

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "requests>=2.31.0",  # HTTP requests for tests
    # Code quality tools
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
]

# Database extras (uncomment when needed)
# postgres = ["asyncpg>=0.29.0", "sqlalchemy>=2.0.0"]
# qdrant = ["qdrant-client>=1.7.0"]
# database = ["localai-llm-template[postgres,qdrant]"]

[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

# Configure hatchling to include the app directory
[tool.hatch.build.targets.wheel]
packages = ["app"]

# Pytest configuration
[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Black configuration
[tool.black]
target-version = ['py310']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false

# Isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = ["pydantic.mypy"]
