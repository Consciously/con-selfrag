[project]
name = "localai-llm-template"
version = "1.0.0"
description = "Clean template for frontend-backend-AI architecture with LocalAI"
authors = [
    {name = "Your Name", email = "your.email@example.com"}
]
readme = "README.md"
requires-python = ">=3.11"

# Minimal essential dependencies following YAGNI principles
dependencies = [
    # Core web framework dependencies
    "fastapi",
    "uvicorn",
    "pydantic>=2.0.0",
    "loguru>=0.7.0",
    
    # HTTP client dependencies
    "openai>=1.0.0",  # OpenAI client for LocalAI compatibility
    "httpx>=0.25.0",  # Async HTTP client
    "requests>=2.31.0",  # HTTP requests for tests and utilities
    
    # Authentication dependencies
    "PyJWT>=2.8.0",          # JSON Web Token implementation
    "passlib[bcrypt]>=1.7.4", # Password hashing library with bcrypt
    "python-multipart>=0.0.6", # Form data parsing for login endpoints
    "email-validator>=2.0.0",  # Email validation for user registration
    
    # Database dependencies for authentication and data storage
    "sqlalchemy",
    "alembic",       # Database migrations
    
    # Math and ML dependencies (install early to avoid conflicts)
    "numpy>=1.24.0",  # Required for embeddings and vector operations
    
    # Database dependencies for RAG pipeline
    "asyncpg>=0.29.0",        # PostgreSQL async driver
    "redis[hiredis]>=5.0.0",  # Redis async client with hiredis for performance
    "qdrant-client>=1.7.0",   # Qdrant vector database client
    
    # RAG pipeline dependencies (install after numpy)
    "sentence-transformers>=2.2.0",  # For embeddings generation
    
    # CLI dependencies
    "click>=8.1.0",     # Command-line interface framework
    "rich>=13.0.0",     # Rich text and beautiful formatting in terminal
    
    # gRPC dependencies for future API expansion
    "grpcio>=1.59.0",        # gRPC core library
    "grpcio-tools>=1.59.0",  # gRPC protocol buffer compiler tools
    "protobuf>=4.24.0",      # Protocol buffers
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "requests>=2.31.0",  # HTTP requests for tests
    # Code quality tools
    "black>=23.0.0",
    "mypy>=1.0.0",
    "isort>=5.12.0",
]

# Database extras (uncomment when needed)
# postgres = ["asyncpg>=0.29.0", "sqlalchemy>=2.0.0"]
# qdrant = ["qdrant-client>=1.7.0"]
# database = ["localai-llm-template[postgres,qdrant]"]

[project.scripts]
selfrag = "app.cli.main:cli"

[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

# Configure hatchling to include the app directory
[tool.hatch.build.targets.wheel]
packages = ["app"]

# Pytest configuration
[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
]

# Black configuration
[tool.black]
target-version = ['py310']
line-length = 88
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# Isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["app"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
ignore_missing_imports = true
warn_unused_ignores = true
warn_redundant_casts = true
warn_unused_configs = true
plugins = ["pydantic.mypy"]
