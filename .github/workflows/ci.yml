name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black ruff mypy isort

      - name: Lint Python code with black
        run: black --check --diff .

      - name: Lint Python code with ruff
        run: ruff check .

      - name: Check import sorting with isort
        run: isort --check-only --diff .

      - name: Type check with mypy
        run: mypy --ignore-missing-imports .

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install Node.js dependencies
        run: |
          if [ -f "frontend/package.json" ]; then
            cd frontend && npm ci
          fi

      - name: Lint JavaScript/TypeScript code
        run: |
          if [ -f "frontend/package.json" ]; then
            cd frontend && npm run lint || echo "No lint script found"
          fi

  build:
    name: Build and Push Images
    runs-on: ubuntu-latest
    needs: lint
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix=sha-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push FastAPI gateway
        uses: docker/build-push-action@v5
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta.outputs.tags }}-gateway
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-asyncio pytest-cov httpx
          if [ -f backend/requirements.txt ]; then
            pip install -r backend/requirements.txt
          fi

      - name: Run Python tests
        run: |
          cd backend && python -m pytest tests/ -v --cov=app --cov-report=xml
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: test_db
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend

  smoke-test:
    name: Smoke Test
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create .env file
        run: |
          cp .env.example .env
          # Update test-specific values
          sed -i 's/POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=test_password/' .env
          sed -i 's/POSTGRES_DB=.*/POSTGRES_DB=test_db/' .env
          sed -i 's/DEBUG=false/DEBUG=true/' .env

      - name: Set up Docker Compose
        run: |
          docker-compose --version
          docker --version

      - name: Start services
        run: |
          docker-compose up -d --build
          sleep 30

      - name: Wait for services to be healthy
        run: |
          max_attempts=30
          attempt=1
          
          check_service() {
            local service=$1
            local endpoint=$2
            local expected_status=${3:-200}
            
            echo "Checking $service..."
            while [ $attempt -le $max_attempts ]; do
              if curl -f -s -o /dev/null -w "%{http_code}" "$endpoint" | grep -q "$expected_status"; then
                echo "✓ $service is ready"
                return 0
              fi
              echo "Waiting for $service... (attempt $attempt/$max_attempts)"
              sleep 10
              attempt=$((attempt + 1))
            done
            echo "✗ $service failed to start"
            return 1
          }
          
          check_service "FastAPI Gateway" "http://localhost:8080/health" "200"
          check_service "Qdrant" "http://localhost:6333/health" "200"
          check_service "PostgreSQL" "http://localhost:5432" "000" || echo "PostgreSQL port check"
          check_service "Redis" "http://localhost:6379" "000" || echo "Redis port check"

      - name: Test API endpoints
        run: |
          # Test health endpoints
          curl -f http://localhost:8080/health || exit 1
          
          # Test basic API functionality
          curl -f http://localhost:6333/health || exit 1
          
          echo "✓ All smoke tests passed"

      - name: Show service logs
        if: failure()
        run: |
          docker-compose logs

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v
          docker system prune -f

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  pre-commit:
    name: Pre-commit Hooks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pre-commit
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          pre-commit install

      - name: Run pre-commit hooks
        run: pre-commit run --all-files
